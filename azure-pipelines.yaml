name: $(Date:yyyyMMdd).$(Rev:r)

# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
trigger:
- main

pool: myAgentPool

variables:
  python.version: '3.7.6'
  azureServiceConnectionId: 'myServiceConnection'
  projectRoot: $(System.DefaultWorkingDirectory)
  environmentName: 'test'
  webappName: 'clark-test-api-AppService'

stages:
#--------------------------------------------#  
# BUILD STAGE
#--------------------------------------------#    
- stage: Build
  jobs:
  - job: Build_Infra
    steps:
    #--------------------------------------------#  
    # Use Terraform to create the Infrastructure      
    # Install Terraform on the pipeline agent 
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
      displayName: 'Terrafom installation'
      inputs:
        terraformVersion: '1.2.9'
    
    - task: DownloadSecureFile@1
      name: terraform_tfvars
      displayName: 'Get terraform.tfvars file'
      inputs:
        secureFile: 'terraform.tfvars'

    - script: |
        echo 'Replace $(terraform_tfvars.secureFilePath) to terraform folder...'
        cp -f $(terraform_tfvars.secureFilePath) $(System.DefaultWorkingDirectory)/terraform/environments/test
      displayName: Replace terraform.tfvars file

    # Run Terraform Init on the pipeline agent 
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      displayName: 'Terrafom init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        backendServiceArm: '$(azureServiceConnectionId)'
        backendAzureRmResourceGroupName: 'Azuredevops'
        backendAzureRmStorageAccountName: 'tfstate2312118135'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'test.terraform.tfstate'

    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      displayName: Terraform validate
      inputs:
        provider: 'azurerm'
        command: 'validate'
    
    # Run Terraform Apply
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      displayName: Terraform apply
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        environmentServiceNameAzureRM: '$(azureServiceConnectionId)'

    #--------------------------------------------#
    # Selenium (UI) Test Suite - Archive the package  
    # "ArchiveFiles@2" picks up the web package and archives it.
    - task: ArchiveFiles@2
      displayName: 'Archive UI Tests'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip'
    # Selenium Test Suite - Publish the package  
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip   # Same as the archiveFile artifact above. 
      displayName: 'Upload UI Tests'
      artifact: drop-uitests

    #--------------------------------------------#    
    # FakeRestAPI - Archive
    # ToDo: Complete the ArchiveFiles@2 task and publish step 
    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: 'Upload FakeRestAPI'
      artifact: drop-fakerestapi

    #--------------------------------------------#  
    # JMeter (Performance) Test Suite - Archive
    - task: ArchiveFiles@2
      displayName: 'Archive PerformanceTestSuite'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/test-suite'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip'
    # JMeter Test Suite - Publish    
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip
      displayName: 'Upload PerformanceTestSuite'
      artifact: drop-perftests

#--------------------------------------------#  
# DEPLOYMENT STAGE
#--------------------------------------------#    
- stage: Deploy
  jobs:
  #--------------------------------------------#  
  # Deploy FakeRestAPI Web App
  - deployment: Deploy_FakeRestAPI
    pool: myAgentPool
    environment: $(environmentName)   # ToDo
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: '$(azureServiceConnectionId)'
              appName: '$(webappName)'
              appType: webApp
              package: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip
          
  #--------------------------------------------#  
  # Selenium | Functional UI Tests
  # ToDo: 
  - deployment: VMDeploy
    displayName: Setup Selenium
    environment:
      name:  $(environmentName)
      resourceType: VirtualMachine
      tags: selenium
    strategy:
      runOnce:
        deploy:
          steps:
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |           
                #! /bin/bash
                sudo apt-get upgrade -y
                sudo apt-get install python3-pip -y
                sudo apt-get install unzip -y
                sudo apt-get install -y chromium-browser
                pip3 install selenium
                cd ~/
                DIR=~/app
                if [ ! -d "$DIR" ]; then
                    mkdir app
                fi
                cd app
                FILE=~/app/chromedriver_linux64.zip
                if [ ! -f "$FILE" ]; then
                    LATEST=$(wget -q -O - http://chromedriver.storage.googleapis.com/LATEST_RELEASE)
                    wget http://chromedriver.storage.googleapis.com/$LATEST/chromedriver_linux64.zip
                    unzip -o chromedriver_linux64.zip
                    sudo ln -s $PWD/chromedriver /usr/local/bin/chromedriver
                fi
                export PATH=$PATH:~/app

#--------------------------------------------#  
# TEST STAGE
#--------------------------------------------#    
- stage: Test
  jobs:
  #--------------------------------------------#  
  # Run performance test on agent
  - deployment: Run_Test
    pool: myAgentPool
    environment: $(environmentName)   # ToDo
    strategy:
      runOnce:
        deploy:
          steps:
          #--------------------------------------------#    
          # Prepare environment for JMeter
          - task: CmdLine@2
            displayName: 'Install Java & Jmeter'
            inputs:
              script: |
                sudo apt-get install openjdk-11-jre-headless -y
                wget "https://dlcdn.apache.org//jmeter/binaries/apache-jmeter-5.6.3.tgz"
                tar -xf apache-jmeter-5.6.3.tgz
                mkdir -p log/jmeter
                unzip -o $(Build.BuildId)-perftests.zip
              workingDirectory: $(Pipeline.Workspace)/drop-perftests
          #--------------------------------------------#    
          # Run Jmeter test suite
          - task: CmdLine@2
            displayName: 'Jmeter Stress Test'
            inputs:
              script: |
                ./apache-jmeter-5.6.3/bin/jmeter -n -t StressTest.jmx -l log/jmeter/stress-test-result.csv -e -f -o log/jmeter/stress-test-html-report -j log/jmeter/jmeter-stress-test.log
                cat log/jmeter/jmeter-stress-test.log                                                              
              workingDirectory: $(Pipeline.Workspace)/drop-perftests
          - task: CmdLine@2
            displayName: 'Jmeter Endurance Test'
            inputs:
              script: |
                ./apache-jmeter-5.6.3/bin/jmeter -n -t EnduranceTest.jmx -l log/jmeter/endurance-test-result.csv -e -f -o log/jmeter/endurance-test-html-report -j log/jmeter/jmeter-endurance-test.log
                cat log/jmeter/jmeter-endurance-test.log                                                              
              workingDirectory: $(Pipeline.Workspace)/drop-perftests
          #--------------------------------------------#
          # Archive Jmeter test report
          - task: ArchiveFiles@2
            displayName: 'Archive Stress Test Result'
            inputs:
              rootFolderOrFile: '$(Pipeline.Workspace)/drop-perftests/log/jmeter/stress-test-html-report'
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(Pipeline.Workspace)/drop-perftests/log/jmeter/stress-test-html-report.zip'
              verbose: true
          - task: ArchiveFiles@2
            displayName: 'Archive Endurance Test Result'
            inputs:
              rootFolderOrFile: '$(Pipeline.Workspace)/drop-perftests/log/jmeter/endurance-test-html-report'
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(Pipeline.Workspace)/drop-perftests/log/jmeter/endurance-test-html-report.zip'
              verbose: true
          #--------------------------------------------#
          # Upload Jmeter test report
          - publish: $(Pipeline.Workspace)/drop-perftests/log/jmeter
            displayName: 'Upload Test Result'
            artifact: drop-jmeter

          #--------------------------------------------#    
          # Install Nodejs    
          - task: Bash@3
            displayName: Install Newman
            inputs:
              targetType: 'inline'
              script: |
              sudo apt-get update
              sudo apt-get -y install nodejs
              
          #--------------------------------------------#    
          # Postman - Install Newman    
          - task: CmdLine@2
            displayName: Install Newman
            inputs:
              script: 'sudo npm install -g newman'
              workingDirectory: $(System.DefaultWorkingDirectory)
          # Postman Data Validation Test Suite    
          # ToDo: Verify the working directory
          - task: CmdLine@2
            displayName: Run Data Validation Tests
            continueOnError: true
            inputs:
              script: 'newman run TestSuite.Validation.json -e Test.Env.json --reporters cli,junit --reporter-junit-export TEST-DataValidation.xml'
              workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
          # Postman Regression Test Suite    
          # ToDo: Verify the working directory
          - task: CmdLine@2
            displayName: Run Regression Tests
            continueOnError: true
            inputs:
              script: 'newman run TestSuite.Regression.json -e Test.Env.json --reporters cli,junit --reporter-junit-export TEST-Regression.xml'
              workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
          # Postman - Publish Results 
          # ToDo: Complete the task as explained here: https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/test/publish-test-results?view=azure-devops&tabs=trx%2Cyaml#yaml-snippet
          - task: PublishTestResults@2
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: '**/TEST-*.xml'
              searchFolder: $(System.DefaultWorkingDirectory)/automatedtesting/postman
              mergeTestResults: true
              testRunTitle: 'Test-$(Date:yyyyMMdd).$(Rev:r)'
  #--------------------------------------------#    
  # Selenium Test on VM
  - deployment: VMDeploy
    displayName: Selenium Tests
    environment:
      name:  $(environmentName)
      resourceType: VirtualMachine
      tags: selenium
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop-uitests
            
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |           
                #! /bin/bash
                mv $(Pipeline.Workspace)/drop-uitests/$(Build.BuildId)-uitests.zip ~/app
                cd app
                unzip -o $(Build.BuildId)-uitests.zip
                echo "Starting Selenium Tests"
                python3 login.py > selenium-test-output.log
                cat selenium-test-output.log
                cd $(System.DefaultWorkingDirectory)
                mkdir -p log/selenium
                sudo cp ~/app/selenium-test-output.log log/selenium
          - publish: $(System.DefaultWorkingDirectory)/log/selenium/selenium-test-output.log
            displayName: 'Publish selenium logs'
            artifact: drop-selenium-logs